{"version":3,"sources":["components/spinner/SidebarSpinner.js","components/sidebar/SidebarItem.js","components/sidebar/Sidebar.js","containers/WeatherMain/WeatherMain.js"],"names":["override","css","SidebarSpinner","sidebarLoading","className","height","width","color","SidebarItem","id","city","recentCity","dispatch","useDispatch","isAuthenticated","useSelector","state","onClick","actions","userId","Sidebar","currentWeather","transitionName","transitionAppear","transitionAppearTimeout","transitionEnter","transitionEnterTimeout","transitionLeave","transitionLeaveTimeout","recentCities","map","i","key","WeatherVideo","React","lazy","WeatherForm","WeatherList","memo","useEffect","length","tokenId","setVideo","cityDetails","isOpen","visible"],"mappings":"yQAMMA,G,OAAWC,cAAH,mEAyBCC,EApBQ,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,eACvB,OACE,yBAAKC,UAAS,+BAA2BD,EAAiB,OAAS,SACjE,oEACA,yBAAKC,UAAU,2BACb,kBAAC,IAAD,CACEH,IAAKD,EACLK,OAAQ,EACRC,MAAO,IACPC,MAAO,Y,QCYFC,EA3BK,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,GACdC,EADkC,EAAhBC,WAElBC,EAAWC,cACXC,EAAkBC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,mBASnD,OACE,yBAAKV,UAAU,eAAeK,GAAIA,GAChC,uBAAGQ,QARmB,WACxBL,EAASM,IAAmBR,EAAMI,EAAgBK,SAClDP,EAASM,IAAgBR,IACzBE,EAASM,KAAqB,MAKIR,GAChC,uBAAGO,QAXY,kBAAML,EAASM,IAA2BT,MAWzD,OC4BSW,G,OAxCC,WACd,IAAMC,EAAiBN,aAAY,SAAAC,GAAK,OAAIA,EAAMK,kBAElD,OACE,2BAAOjB,UAAU,YACf,wDACA,kBAAC,EAAD,CACED,eAAgBkB,EAAelB,iBAEjC,4BACE,kBAAC,IAAD,CACEmB,eAAe,YACfC,kBAAkB,EAClBC,wBAAyB,IACzBC,iBAAiB,EACjBC,uBAAwB,IACxBC,iBAAiB,EACjBC,uBAAwB,KACvBP,EAAeQ,aAAaC,KAAI,SAACpB,EAAMqB,GAAP,OAC/B,wBACEC,IAAKD,EACL3B,UAAU,gBACR,kBAAC,EAAD,CACE4B,IAAKD,EACLtB,GAAIC,EAAKD,GACTE,WAAYD,EAAKA,gBC1B7BuB,G,OAAeC,IAAMC,MAAK,kBAAM,mCAChCC,EAAcF,IAAMC,MAAK,kBAAM,kCAC/BE,EAAcH,IAAMC,MAAK,kBAAM,kCAsDtBD,cAAMI,MApDD,WAClB,IAAMjB,EAAiBN,aAAY,SAAAC,GAAK,OAAIA,EAAMK,kBAC5CP,EAAkBC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,mBAC7CF,EAAWC,cASjB,OAPA0B,qBAAU,WACHlB,EAAeQ,aAAaW,QAC/B5B,EAASM,IAA0BJ,EAAgB2B,QAAS3B,EAAgBK,WAG7E,IAGD,6BAASf,UAAU,aACjB,yBAAKA,UAAU,0BACb,wBAAIA,UAAU,eAAd,sCACA,yBAAKA,UAAU,QACb,yBAAKA,UAAU,gBACb,kBAAC6B,EAAD,CACES,SAAUrB,EAAeqB,WAE3B,kBAACL,EAAD,CACEM,YAAatB,EAAesB,YAC5BC,OAAQvB,EAAeuB,SAEzB,kBAACR,EAAD,CACEQ,OAAQvB,EAAeuB,OACvBlC,KAAMW,EAAeX,QAGzB,yBAAKN,UAAU,iBACb,kBAAC,EAAD,CACEyB,aAAcR,EAAeQ,aAC7BgB,QAASxB,EAAewB","file":"static/js/8.661d0175.chunk.js","sourcesContent":["import BarLoader from 'react-spinners/BarLoader';\nimport { css } from '@emotion/core';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport './Spinner.css';\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n`;\n\nconst SidebarSpinner = ({sidebarLoading}) => {\n  return (\n    <div className={`sidebar-spinner-wrap ${(sidebarLoading ? 'show' : 'hide')}`}>\n      <p>Gathering recently searched cities...</p>  \n      <div className=\"spinner sidebar-spinner\">\n        <BarLoader\n          css={override}\n          height={5}\n          width={100}\n          color={\"#fff\"}\n        />\n      </div>\n    </div>\n  );\n};\n\nSidebarSpinner.propTypes = {\n  loading: PropTypes.bool\n};\n\nexport default SidebarSpinner;","import * as actions from '../../redux/actions/currentWeather';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nconst SidebarItem = ({id, recentCity}) => {\n  const city = recentCity;\n  const dispatch = useDispatch();\n  const isAuthenticated = useSelector(state => state.isAuthenticated);\n  const deleteCity = () => dispatch(actions.deleteRecentCities(id));\n\n  const searchSidebarCity = () => {\n    dispatch(actions.getWeather(city, isAuthenticated.userId));\n    dispatch(actions.setCity(city));\n    dispatch(actions.runEasterEgg(false));\n  };\n\n  return (\n    <div className=\"sidebar-item\" id={id}>\n      <p onClick={searchSidebarCity}>{city}</p>\n      <p onClick={deleteCity}>x</p>\n    </div>\n  );  \n};\n\nSidebarItem.propTypes = {\n  recentCity: PropTypes.string,\n  dispatch: PropTypes.func,\n  city: PropTypes.string,\n  id: PropTypes.string\n};\n\nexport default SidebarItem;","import CSSTransitionGroup from 'react-transition-group/CSSTransitionGroup';\nimport SidebarSpinner from '../spinner/SidebarSpinner';\nimport { useSelector } from 'react-redux';\nimport SidebarItem from './SidebarItem';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport './Sidebar.css';\n\nconst Sidebar = () => {\n  const currentWeather = useSelector(state => state.currentWeather);\n\n  return (\n    <aside className=\"side-bar\">\n      <h3>Recently Searched Cities</h3>\n      <SidebarSpinner\n        sidebarLoading={currentWeather.sidebarLoading}\n      />\n      <ul>\n        <CSSTransitionGroup\n          transitionName=\"list-item\"\n          transitionAppear={true}\n          transitionAppearTimeout={500}\n          transitionEnter={true}\n          transitionEnterTimeout={500}\n          transitionLeave={true}\n          transitionLeaveTimeout={300}>\n          {currentWeather.recentCities.map((city, i) => (\n            <li \n              key={i}\n              className=\"sidebar-Item\">\n                <SidebarItem \n                  key={i}\n                  id={city.id}\n                  recentCity={city.city} \n                />\n              </li>\n            ))\n          }\n        </CSSTransitionGroup>\n      </ul>\n    </aside>\n  );\n};\n\nSidebar.propTypes = {\n  recentCities: PropTypes.array\n};\n\nexport default Sidebar;\n","import * as actions from '../../redux/actions/currentWeather';\nimport Sidebar from '../../components/sidebar/Sidebar';\nimport { useSelector, useDispatch } from 'react-redux';\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport './WeatherMain.css';\n\nconst WeatherVideo = React.lazy(() => import('../../components/weather-video/WeatherVideo'));\nconst WeatherForm = React.lazy(() => import('../../components/weather-form/WeatherForm'));\nconst WeatherList = React.lazy(() => import('../../components/weather/WeatherList'));\n\nconst WeatherMain = () => {\n  const currentWeather = useSelector(state => state.currentWeather);\n  const isAuthenticated = useSelector(state => state.isAuthenticated);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (!currentWeather.recentCities.length) {\n      dispatch(actions.fetchRecentCities(isAuthenticated.tokenId, isAuthenticated.userId));\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <section className=\"container\">\n      <div className=\"weather-main body-text\">\n        <h1 className=\"page-header\">Search a city to check the weather</h1>\n        <div className=\"hold\">\n          <div className=\"weather-left\">\n            <WeatherVideo \n              setVideo={currentWeather.setVideo}  \n            />\n            <WeatherList\n              cityDetails={currentWeather.cityDetails}\n              isOpen={currentWeather.isOpen}\n            />\n            <WeatherForm\n              isOpen={currentWeather.isOpen}\n              city={currentWeather.city}\n            />\n          </div>\n          <div className=\"weather-right\">\n            <Sidebar\n              recentCities={currentWeather.recentCities}\n              visible={currentWeather.visible}\n            />\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nWeatherMain.propTypes = {\n  recentCities: PropTypes.array,\n  cityDetails: PropTypes.array,\n  setVideo: PropTypes.string,\n  dispatch: PropTypes.func,\n  visible: PropTypes.bool,\n  isOpen: PropTypes.bool,\n  city: PropTypes.string\n};\n\nexport default React.memo(WeatherMain);"],"sourceRoot":""}