{"version":3,"sources":["components/weather-form/WeatherForm.js"],"names":["WeatherForm","isAuthenticated","useSelector","state","fiveDayForecast","currentWeather","useState","city","setCity","userId","weatherInput","React","useRef","dispatch","useDispatch","clearInput","current","value","className","isOpen","action","method","ref","onChange","e","actions","target","type","placeholder","onClick","preventDefault","cityName","length","toLowerCase","getWeather","fetchFlagAction","fetchFlag"],"mappings":"qMAwEeA,UAjEK,WAClB,IAAMC,EAAkBC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,mBAC7CG,EAAkBF,aAAY,SAAAC,GAAK,OAAIA,EAAMC,mBAC7CC,EAAiBH,aAAY,SAAAC,GAAK,OAAIA,EAAME,kBAClD,EAAwBC,mBAAS,CAACC,KAAM,KAAxC,mBAAOA,EAAP,KAAaC,EAAb,KACMC,EAASR,EAAgBQ,OACzBC,EAAeC,IAAMC,SACrBC,EAAWC,cAqBXC,EAAa,kBAAML,EAAaM,QAAQC,MAAQ,IAEtD,OACE,yBAAKC,UAAU,eACb,yBAAKA,UAAS,UAAMb,EAAec,OAAS,OAAS,SACnD,0BAAMC,OAAO,IAAIC,OAAO,OACtB,2BACEC,IAAKZ,EACLa,SA3BO,SAACC,GAChBX,EAASY,IAAgBD,EAAEE,OAAOT,QAClCT,EAAQgB,EAAEE,OAAOT,QA0BTU,KAAK,OACLC,YAAY,cACZV,UAAU,eAEZ,4BACEW,QAAS,SAAAL,GAAC,OA5BD,SAACA,GAClBA,EAAEM,iBACF,IAAMC,EAAWxB,EAAKyB,OAASzB,EAAK0B,cAAgB,GACpDpB,EAASY,IAAmBM,EAAUtB,IACtCD,EAAQ,IAwBc0B,CAAWV,IACzBG,KAAK,SACLT,UAAU,eAHZ,UAIA,uCAAY,6BAAZ,qBAGJ,yBAAKA,UAAS,sBAAkBb,EAAec,OAAS,OAAS,SAC/D,mDACA,4BACEU,QA9BY,WAClBhB,EAASY,OACTZ,EAASsB,MAA+B/B,EAAgBgC,YACxDvB,EAASY,KAAqB,IAC9BV,MAyBI","file":"static/js/12.51fbfdf4.chunk.js","sourcesContent":["import * as fetchFlagAction from '../../redux/actions/fiveDayForecast';\nimport * as actions from '../../redux/actions/currentWeather';\nimport { useSelector, useDispatch } from 'react-redux';\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './WeatherForm.css';\n\nconst WeatherForm = () => {\n  const isAuthenticated = useSelector(state => state.isAuthenticated);\n  const fiveDayForecast = useSelector(state => state.fiveDayForecast);\n  const currentWeather = useSelector(state => state.currentWeather);\n  const [city, setCity] = useState({city: ''});\n  const userId = isAuthenticated.userId;\n  const weatherInput = React.useRef();\n  const dispatch = useDispatch();\n\n  const onChange = (e) => {\n    dispatch(actions.setCity(e.target.value));\n    setCity(e.target.value);\n  };\n\n  const getWeather = (e) => {\n    e.preventDefault();\n    const cityName = city.length ? city.toLowerCase() : '';\n    dispatch(actions.getWeather(cityName, userId));\n    setCity('');\n  };\n\n  const resetSearch = () => {\n    dispatch(actions.resetSearch());\n    dispatch(fetchFlagAction.setFetchFlag(!!fiveDayForecast.fetchFlag));\n    dispatch(actions.runEasterEgg(false));\n    clearInput();\n  };\n\n  const clearInput = () => weatherInput.current.value = '';\n\n  return (\n    <div className=\"weatherForm\"> \n      <div className={`${(currentWeather.isOpen ? 'show' : 'hide')}`}>\n        <form action='/' method='GET'>\n          <input\n            ref={weatherInput}\n            onChange={onChange}\n            type='text'\n            placeholder='Search city'\n            className=\"searchMain\"\n          />\n          <button\n            onClick={e => getWeather(e)}\n            type='submit'\n            className='search-city'>Search</button>\n          <p>Example: <br/> Pittsburgh, PA</p>\n        </form>\n      </div>\n      <div className={`resetButton ${(currentWeather.isOpen ? 'hide' : 'show')}`}>\n        <p>Search another city?</p>\n        <button\n          onClick={resetSearch}>Search\n        </button>\n      </div>\n    </div>\n  );\n};\n\nWeatherForm.propTypes = {\n  resetSearch: PropTypes.func,\n  getWeather: PropTypes.func,\n  onChange: PropTypes.func,\n  isOpen: PropTypes.bool\n};\n\nexport default WeatherForm;"],"sourceRoot":""}