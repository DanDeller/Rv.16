{"version":3,"sources":["components/spinner/SidebarSpinner.js","components/sidebar/SidebarItem.js","components/sidebar/Sidebar.js","containers/WeatherMain/WeatherMain.js"],"names":["override","css","SidebarSpinner","sidebarLoading","className","height","width","color","SidebarItem","id","recentCity","useState","toggleState","setToggle","dispatch","useDispatch","city","onClick","style","transform","opacity","actions","display","Sidebar","currentWeather","useSelector","state","transitionName","transitionAppear","transitionAppearTimeout","transitionEnter","transitionEnterTimeout","transitionLeave","transitionLeaveTimeout","recentCities","map","i","key","WeatherVideo","React","lazy","WeatherForm","WeatherList","WeatherMain","isAuthenticated","useEffect","length","userId","setVideo","isOpen","cityDetails","visible"],"mappings":"2XAMA,IAAMA,EAAWC,cAAH,KAyBCC,EApBQ,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,eACvB,OACE,yBAAKC,UAAS,+BAA2BD,EAAiB,OAAS,SACjE,oEACA,yBAAKC,UAAU,2BACb,kBAAC,IAAD,CACEH,IAAKD,EACLK,OAAQ,EACRC,MAAO,IACPC,MAAO,Y,eCwBFC,EAvCK,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,GAAIC,EAAgB,EAAhBA,WAAgB,EACPC,oBAAS,GADF,mBACjCC,EADiC,KACpBC,EADoB,KAElCC,EAAWC,cACXC,EAAON,EAMb,OACE,yBACEN,UAAU,cACVa,QAPW,kBAAMJ,GAAWD,IAQ5BH,GAAIA,GACJ,uBACES,MAAO,CACLC,UAAYP,EAAgC,mBAAlB,gBAC1BQ,QAAUR,EAAoB,KAAN,MAEzBI,GAEH,4BACEC,QAfa,kBAAMH,EAASO,IAA2BZ,KAgBvDS,MAAO,CACLI,QAASV,EAAc,OAAS,SAHpC,YCsBSW,G,OAxCC,WACd,IAAMC,EAAiBC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,kBAElD,OACE,2BAAOpB,UAAU,WACf,kBAAC,EAAD,CACED,eAAgBqB,EAAerB,iBAEjC,wDACA,4BACE,kBAAC,IAAD,CACEwB,eAAe,YACfC,kBAAkB,EAClBC,wBAAyB,IACzBC,iBAAiB,EACjBC,uBAAwB,IACxBC,iBAAiB,EACjBC,uBAAwB,KACvBT,EAAeU,aAAaC,KAAI,SAACnB,EAAMoB,GAAP,OAC/B,wBACEC,IAAKD,EACLhC,UAAU,eACR,kBAAC,EAAD,CACEiC,IAAKD,EACL3B,GAAIO,EAAKP,GACTC,WAAYM,EAAKA,gBC1B7BsB,G,OAAeC,IAAMC,MAAK,kBAAM,mCAChCC,EAAcF,IAAMC,MAAK,kBAAM,kCAC/BE,EAAcH,IAAMC,MAAK,kBAAM,kCAsDtBG,UApDK,WAClB,IAAMnB,EAAiBC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,kBAC5CoB,EAAkBnB,aAAY,SAAAC,GAAK,OAAIA,EAAMkB,mBAC7C9B,EAAWC,cASjB,OAPA8B,qBAAU,WACHrB,EAAeU,aAAaY,QAC/BhC,EAASO,IAA0BuB,EAAgBG,WAGpD,IAGD,6BAAS3C,UAAU,aACjB,yBAAKA,UAAU,wBACb,wBAAIA,UAAU,cAAd,sCACA,yBAAKA,UAAU,QACb,yBAAKA,UAAU,eACb,kBAACkC,EAAD,CACEU,SAAUxB,EAAewB,WAE3B,kBAACP,EAAD,CACEQ,OAAQzB,EAAeyB,OACvBjC,KAAMQ,EAAeR,OAEvB,kBAAC0B,EAAD,CACEQ,YAAa1B,EAAe0B,YAC5BD,OAAQzB,EAAeyB,UAG3B,yBAAK7C,UAAU,gBACb,kBAAC,EAAD,CACE8B,aAAcV,EAAeU,aAC7BiB,QAAS3B,EAAe2B","file":"static/js/8.1834de04.chunk.js","sourcesContent":["import BarLoader from 'react-spinners/BarLoader';\nimport { css } from '@emotion/core';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport './Spinner.scss';\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n`;\n\nconst SidebarSpinner = ({sidebarLoading}) => {\n  return (\n    <div className={`sidebar-spinner-wrap ${(sidebarLoading ? 'show' : 'hide')}`}>\n      <p>Gathering recently searched cities...</p>  \n      <div className=\"spinner sidebar-spinner\">\n        <BarLoader\n          css={override}\n          height={5}\n          width={100}\n          color={\"#fff\"}\n        />\n      </div>\n    </div>\n  );\n};\n\nSidebarSpinner.propTypes = {\n  loading: PropTypes.bool\n};\n\nexport default SidebarSpinner;","import * as actions from '../../redux/actions/currentWeather';\nimport { useDispatch } from 'react-redux';\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst SidebarItem = ({id, recentCity}) => {\n  const [toggleState, setToggle] = useState(false);\n  const dispatch = useDispatch();\n  const city = recentCity;\n\n  const toggle = () => setToggle(!toggleState);\n\n  const deleteCity = () => dispatch(actions.deleteRecentCities(id));\n\n  return (\n    <div\n      className=\"sidebarItem\"\n      onClick={toggle}\n      id={id}>\n      <p\n        style={{\n          transform: !toggleState ? 'translateY(0)' : 'translateX(-5vh)',\n          opacity: !toggleState ? '1' : '.4'\n        }}>\n        {city}\n      </p>\n      <button\n        onClick={deleteCity}\n        style={{\n          display: toggleState ? 'flex' : 'none'\n        }}>\n        Remove\n      </button>\n    </div>\n  );  \n};\n\nSidebarItem.propTypes = {\n  recentCity: PropTypes.string,\n  dispatch: PropTypes.func,\n  city: PropTypes.string,\n  id: PropTypes.string\n};\n\nexport default SidebarItem;","import CSSTransitionGroup from 'react-transition-group/CSSTransitionGroup';\nimport SidebarSpinner from '../spinner/SidebarSpinner';\nimport SidebarItem from './SidebarItem';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport './Sidebar.scss';\n\nconst Sidebar = () => {\n  const currentWeather = useSelector(state => state.currentWeather);\n\n  return (\n    <aside className=\"sideBar\">\n      <SidebarSpinner\n        sidebarLoading={currentWeather.sidebarLoading}\n      />\n      <h3>Recently Searched Cities</h3>\n      <ul>\n        <CSSTransitionGroup\n          transitionName=\"list-item\"\n          transitionAppear={true}\n          transitionAppearTimeout={500}\n          transitionEnter={true}\n          transitionEnterTimeout={500}\n          transitionLeave={true}\n          transitionLeaveTimeout={300}>\n          {currentWeather.recentCities.map((city, i) => (\n            <li \n              key={i}\n              className=\"sidebarItem\">\n                <SidebarItem \n                  key={i}\n                  id={city.id}\n                  recentCity={city.city} \n                />\n              </li>\n            ))\n          }\n        </CSSTransitionGroup>\n      </ul>\n    </aside>\n  );\n};\n\nSidebar.propTypes = {\n  recentCities: PropTypes.array\n};\n\nexport default Sidebar;\n","import * as actions from '../../redux/actions/currentWeather';\nimport Sidebar from '../../components/sidebar/Sidebar';\nimport { useSelector, useDispatch } from 'react-redux';\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport './WeatherMain.scss';\n\nconst WeatherVideo = React.lazy(() => import('../../components/weather-video/WeatherVideo'));\nconst WeatherForm = React.lazy(() => import('../../components/weather-form/WeatherForm'));\nconst WeatherList = React.lazy(() => import('../../components/weather/WeatherList'));\n\nconst WeatherMain = () => {\n  const currentWeather = useSelector(state => state.currentWeather);\n  const isAuthenticated = useSelector(state => state.isAuthenticated);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (!currentWeather.recentCities.length) {\n      dispatch(actions.fetchRecentCities(isAuthenticated.userId));\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <section className=\"container\">\n      <div className=\"weatherMain bodyText\">\n        <h1 className=\"pageHeader\">Search a city to check the weather</h1>\n        <div className=\"hold\">\n          <div className=\"weatherLeft\">\n            <WeatherVideo \n              setVideo={currentWeather.setVideo}  \n            />\n            <WeatherForm\n              isOpen={currentWeather.isOpen}\n              city={currentWeather.city}\n            />\n            <WeatherList\n              cityDetails={currentWeather.cityDetails}\n              isOpen={currentWeather.isOpen}\n            />\n          </div>\n          <div className=\"weatherRight\">\n            <Sidebar\n              recentCities={currentWeather.recentCities}\n              visible={currentWeather.visible}\n            />\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nWeatherMain.propTypes = {\n  recentCities: PropTypes.array,\n  cityDetails: PropTypes.array,\n  setVideo: PropTypes.string,\n  dispatch: PropTypes.func,\n  visible: PropTypes.bool,\n  isOpen: PropTypes.bool,\n  city: PropTypes.string\n};\n\nexport default WeatherMain;"],"sourceRoot":""}