{"version":3,"sources":["components/weather-form/WeatherForm.js"],"names":["WeatherForm","isAuthenticated","useSelector","state","fiveDayForecast","currentWeather","useState","city","setCity","userId","weatherInput","React","useRef","dispatch","useDispatch","clearInput","current","value","className","isOpen","action","method","ref","onChange","e","actions","target","type","name","placeholder","onClick","preventDefault","getWeather","fetchFlagAction","fetchFlag"],"mappings":"oMAuEeA,UAhEK,WAClB,IAAMC,EAAkBC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,mBAC7CG,EAAkBF,aAAY,SAAAC,GAAK,OAAIA,EAAMC,mBAC7CC,EAAiBH,aAAY,SAAAC,GAAK,OAAIA,EAAME,kBAH1B,EAIAC,mBAAS,CAACC,KAAM,KAJhB,mBAIjBA,EAJiB,KAIXC,EAJW,KAKlBC,EAASR,EAAgBQ,OACzBC,EAAeC,IAAMC,SACrBC,EAAWC,cAkBXC,EAAa,kBAAML,EAAaM,QAAQC,MAAQ,IAEtD,OACE,yBAAKC,UAAU,eACb,yBAAKA,UAAS,UAAMb,EAAec,OAAS,OAAS,SACnD,0BAAMC,OAAO,IAAIC,OAAO,OACtB,2BACEC,IAAKZ,EACLa,SAxBO,SAACC,GAChBX,EAASY,IAAgBD,EAAEE,OAAOT,QAClCT,EAAQgB,EAAEE,OAAOT,QAuBTU,KAAK,OACLC,KAAK,OACLC,YAAY,cACZX,UAAU,eAEZ,2BACEY,QAAS,SAAAN,GAAC,OA1BD,SAACA,GAClBA,EAAEO,iBACFlB,EAASY,IAAmBlB,EAAME,IAwBZuB,CAAWR,IACzBG,KAAK,SACLV,MAAM,SACNC,UAAU,kBAIhB,yBAAKA,UAAS,sBAAkBb,EAAec,OAAS,OAAS,SAC/D,kDACA,4BACEW,QA/BY,WAClBjB,EAASY,OACTZ,EAASoB,MAA+B7B,EAAgB8B,YACxDnB,MA2BI","file":"static/js/11.9d61c985.chunk.js","sourcesContent":["import * as fetchFlagAction from '../../redux/actions/fiveDayForecast';\nimport * as actions from '../../redux/actions/currentWeather';\nimport { useSelector, useDispatch } from 'react-redux';\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './WeatherForm.scss';\n\nconst WeatherForm = () => {\n  const isAuthenticated = useSelector(state => state.isAuthenticated);\n  const fiveDayForecast = useSelector(state => state.fiveDayForecast);\n  const currentWeather = useSelector(state => state.currentWeather);\n  const [city, setCity] = useState({city: ''});\n  const userId = isAuthenticated.userId;\n  const weatherInput = React.useRef();\n  const dispatch = useDispatch();\n\n  const onChange = (e) => {\n    dispatch(actions.setCity(e.target.value));\n    setCity(e.target.value);\n  };\n\n  const getWeather = (e) => {\n    e.preventDefault();\n    dispatch(actions.getWeather(city, userId));\n  };\n\n  const resetSearch = () => {\n    dispatch(actions.resetSearch());\n    dispatch(fetchFlagAction.setFetchFlag(!!fiveDayForecast.fetchFlag));\n    clearInput();\n  };\n\n  const clearInput = () => weatherInput.current.value = '';\n\n  return (\n    <div className=\"weatherForm\"> \n      <div className={`${(currentWeather.isOpen ? 'show' : 'hide')}`}>\n        <form action='/' method='GET'>\n          <input\n            ref={weatherInput}\n            onChange={onChange}\n            type='text'\n            name='test'\n            placeholder='Search city'\n            className=\"searchMain\"\n          />\n          <input\n            onClick={e => getWeather(e)}\n            type='submit'\n            value='Search'\n            className='search-city'\n          />\n        </form>\n      </div>\n      <div className={`resetButton ${(currentWeather.isOpen ? 'hide' : 'show')}`}>\n        <p>Seach another city?</p>\n        <button\n          onClick={resetSearch}>Search\n        </button>\n      </div>\n    </div>\n  );\n};\n\nWeatherForm.propTypes = {\n  resetSearch: PropTypes.func,\n  getWeather: PropTypes.func,\n  onChange: PropTypes.func,\n  isOpen: PropTypes.bool\n};\n\nexport default WeatherForm;"],"sourceRoot":""}