{"version":3,"sources":["containers/FiveDayForecast/FiveDayForecast.js"],"names":["FiveDayForecast","dispatch","useDispatch","currentWeather","useSelector","state","fiveDayForecast","forgotCityInline","setCity","length","useEffect","fetchFlag","city","actions","days","map","day","i","className","key","format","dt_txt","split","main","temp","toFixed","weather","description","toUpperCase","slice"],"mappings":"mIAAA,2EA0DeA,UAlDS,WACtB,IAAMC,EAAWC,cACXC,EAAiBC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,kBAC5CG,EAAkBF,aAAY,SAAAC,GAAK,OAAIA,EAAMC,mBAC7CC,EAAoBJ,EAAeK,QAAQC,OAAkB,OAAT,OAE1DC,qBAAU,WACR,IAAMC,EAAYL,EAAgBK,UAC5BC,EAAYT,EAAeK,QAE7BL,EAAeK,QAAQC,SAAWE,IACpCV,EAASY,IAAkBD,IAC3BX,EAASY,MAAuBP,EAAgBK,eAGjD,IAEH,IAAMG,EAAOR,EAAgBQ,KAAKC,KAAI,SAACC,EAAKC,GAAN,OACpC,yBAAKC,UAAS,cAA2C,IAAlCf,EAAeK,QAAQC,OAAe,OAAS,QAAUU,IAAKF,GACnF,2BACE,kBAAC,IAAD,CAAQG,OAAO,QACZJ,EAAIK,OAAOC,MAAM,KAAK,IAEzB,8BAAON,EAAIK,OAAOC,MAAM,KAAK,KAE/B,2BAAIN,EAAIO,KAAKC,KAAKC,QAAQ,IAC1B,qCAAOT,EAAIU,QAAQ,GAAGC,YAAY,GAAGC,eAArC,OAAqDZ,EAAIU,QAAQ,GAAGC,YAAYE,MAAM,SAI1F,OACE,6BAASX,UAAU,aACjB,yBAAKA,UAAU,wBACb,wBAAIA,UAAU,cAAd,mCACA,yBAAKA,UAAU,WACb,wBAAIA,UAAS,0BAAqBX,IAAlC,2BACCO","file":"static/js/13.e4be4517.chunk.js","sourcesContent":["import * as actions from '../../redux/actions/fiveDayForecast';\nimport { useSelector, useDispatch } from 'react-redux';\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Moment from 'react-moment';\nimport './FiveDayForecast.scss';\nimport 'moment-timezone';\n\nconst FiveDayForecast = () => {\n  const dispatch = useDispatch();\n  const currentWeather = useSelector(state => state.currentWeather);\n  const fiveDayForecast = useSelector(state => state.fiveDayForecast);\n  const forgotCityInline = !currentWeather.setCity.length ? 'show' : 'hide';\n\n  useEffect(() => {\n    const fetchFlag = fiveDayForecast.fetchFlag,\n          city      = currentWeather.setCity;\n\n    if (currentWeather.setCity.length && !fetchFlag) {\n      dispatch(actions.fetchDays(city));\n      dispatch(actions.setFetchFlag(!!fiveDayForecast.fetchFlag));\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  const days = fiveDayForecast.days.map((day, i) => (\n    <div className={`day ${currentWeather.setCity.length === 0 ? 'hide' : 'show'}`} key={i}>\n      <p>\n        <Moment format=\"dddd\">\n          {day.dt_txt.split(' ')[0]}\n        </Moment>\n        <span>{day.dt_txt.split(' ')[0]}</span>  \n      </p>\n      <p>{day.main.temp.toFixed(0)}</p>\n      <p>{`${day.weather[0].description[0].toUpperCase()}${day.weather[0].description.slice(1)}`}</p>\n    </div>\n  ));\n\n  return (\n    <section className=\"container\">\n      <div className=\"weatherMain bodyText\">\n        <h1 className=\"pageHeader\">Forecast for the next five days</h1>\n        <div className=\"dayHold\">\n          <h3 className={`hide forgotCity ${forgotCityInline}`}>Go lookup a city first!</h3>\n          {days}\n        </div>\n      </div>\n    </section>\n  );\n};\n\nFiveDayForecast.propTypes = {\n  fetchFlag: PropTypes.bool,\n  dispatch: PropTypes.func,\n  city: PropTypes.string,\n  days: PropTypes.array\n};\n\nexport default FiveDayForecast;"],"sourceRoot":""}